// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // uses connection pooling
}

generator client {
  provider = "prisma-client-js"
}

enum AuthType {
  GOOGLE
  REOWN
  RAINBOW_KIT
  PRIVY
}

enum StorageProvider {
  IPFS
  R2
  VERCEL_BLOB
  SUPABASE_STORAGE
}

enum ContributionType {
  DEVELOPMENT
  CONTENT
  CURATE
  OTHER
}

enum Platform {
  GITHUB
  X
  DISCORD
  FARCASTER
  OTHER
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum SiteMode {
  BASIC
  NOTE_TAKING
}

model Site {
  id              String          @id @default(uuid()) @db.Uuid
  name            String          @default("") @db.VarChar(100)
  description     String          @default("") @db.VarChar(500)
  about           String          @default("") @db.Text
  spaceId         String?         @db.VarChar(50)
  logo            String?         @default("") @db.VarChar(2183)
  font            String          @default("font-cal") @db.VarChar(50)
  image           String?         @default("") @db.VarChar(2183)
  email           String?         @unique @db.VarChar(255)
  mode            SiteMode        @default(BASIC)
  authSecret      String?         @unique @db.VarChar(255)
  authType        AuthType        @default(RAINBOW_KIT)
  authConfig      Json?
  storageProvider StorageProvider @default(IPFS)
  storageConfig   Json?
  socials         Json?
  config          Json?
  themeName       String?         @db.VarChar(50)
  themeConfig     Json?
  memberCount     Int             @default(0) @db.Integer
  postCount       Int             @default(0) @db.Integer
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  user            User            @relation(fields: [userId], references: [id])
  userId          String          @db.Uuid
  collaborators   Collaborator[]
  channels        Channel[]
  messages        Message[]
  posts           Post[]
  domains         Domain[]
  tags            Tag[]
  postTags        PostTag[]
  accessTokens    AccessToken[]
  comments        Comment[]
  pages           Page[]
  blocks          Block[]
  databases       Database[]
  fields          Field[]
  records         Record[]
  views           View[]
  assets          Asset[]
  albums          Album[]
  labels          Label[]

  @@index([userId])
  @@map("site")
}

model User {
  id            String         @id @default(uuid()) @db.Uuid
  name          String?        @db.VarChar(255)
  displayName   String?        @db.VarChar(255)
  ensName       String?        @db.VarChar(255)
  email         String?        @unique @db.VarChar(255)
  emailVerified DateTime?
  github        Json? // github oauth info
  google        Json? // google oauth info
  cfApiToken    String         @default("") @db.VarChar(2183)
  image         String?        @db.VarChar(2183)
  cover         String?        @db.VarChar(2183)
  bio           String         @default("") @db.VarChar(5000)
  about         String         @default("")
  subscriptions Json?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  posts         Post[]
  comments      Comment[]
  tags          Tag[]
  accessTokens  AccessToken[]
  contributors  Collaborator[]
  messages      Message[]
  sites         Site[]
  accounts      Account[]
  theme         Theme[]
  hostedSites   HostedSite[]
  assets        Asset[]
  labels        Label[]
  albums        Album[]
  pages         Page[]
  blocks        Block[]
  databases     Database[]
  fields        Field[]
  records       Record[]
  views         View[]
  subscription  Subscription[]

  @@index([id])
  @@map("user")
}

enum ProviderType {
  GOOGLE
  GITHUB
  WALLET
  FARCASTER
}

model Account {
  id                String       @id @default(uuid()) @db.Uuid
  providerType      ProviderType
  providerAccountId String       @unique @default("") @db.VarChar(255)
  providerInfo      Json?
  email             String?      @db.VarChar(255)
  refreshToken      String?      @db.VarChar(255)
  accessToken       String?      @db.VarChar(255)
  expiresAt         Int?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt
  user              User         @relation(fields: [userId], references: [id])
  userId            String       @db.Uuid

  @@index([userId])
  @@map("account")
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAUSED
  EXPIRED
}

model Subscription {
  id        String             @id @default(uuid()) @db.Uuid
  planId    String             @default("") @db.VarChar(100)
  status    SubscriptionStatus
  startedAt DateTime
  endedAt   DateTime
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id])
  userId    String             @db.Uuid

  @@index([userId])
  @@map("subscription")
}

model Coupon {
  id        String   @id @default(uuid()) @db.Uuid
  planId    String   @default("") @db.VarChar(100)
  code      String   @unique @default("") @db.VarChar(100)
  isUsed    Boolean  @default(false)
  duration  Int      @db.Integer
  createdAt DateTime @default(now())

  @@map("coupon")
}

model Node {
  id         String   @id @default(uuid()) @db.Uuid
  userId     String?
  parentId   String?
  databaseId String?
  type       String
  element    Json?
  props      Json?
  collapsed  Boolean  @default(false)
  folded     Boolean  @default(true)
  children   Json?
  date       String?  @db.VarChar(20)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@map("node")
}

enum PostType {
  ARTICLE
  IMAGE
  VIDEO
  AUDIO
  NFT
  FIGMA
  NOTE
}

enum GateType {
  FREE
  PAID
  MEMBER_ONLY
}

enum PostStatus {
  PUBLISHED
  DRAFT
  ARCHIVED
}

enum CommentStatus {
  OPEN
  CLOSED
}

model Post {
  id            String        @id @default(uuid()) @db.Uuid
  slug          String        @unique @default(uuid())
  title         String        @default("") @db.VarChar(500)
  description   String        @default("") @db.VarChar(1000)
  content       String        @default("") @db.Text
  cid           String        @default("") @db.VarChar(100)
  pageId        String?       @unique @db.Uuid
  creationId    Int?          @db.Integer
  type          PostType      @default(ARTICLE)
  gateType      GateType      @default(FREE)
  postStatus    PostStatus    @default(DRAFT)
  commentStatus CommentStatus @default(OPEN)
  commentCount  Int           @default(0) @db.Integer
  image         String?       @default("") @db.VarChar(2183)
  featured      Boolean       @default(false)
  collectible   Boolean       @default(false)
  publishedAt   DateTime?
  archivedAt    DateTime?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  userId        String        @db.Uuid

  site     Site      @relation(fields: [siteId], references: [id])
  siteId   String    @db.Uuid
  comments Comment[]
  postTags PostTag[]

  @@index([userId])
  @@index([postStatus])
  @@index([type])
  @@index([gateType])
  @@index([userId, postStatus])
  @@index([userId, type])
  @@map("post")
}

model Comment {
  id         String    @id @default(uuid()) @db.Uuid
  content    String    @default("") @db.Text
  // Points to the ID of the parent comment, null for the root comment
  replyCount Int       @default(0) @db.Integer
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  post       Post      @relation(fields: [postId], references: [id])
  postId     String    @db.Uuid
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  parent     Comment?  @relation("ReplyRelation", fields: [parentId], references: [id]) // parent comments
  parentId   String?   @db.Uuid
  replies    Comment[] @relation("ReplyRelation") // sub comments
  site       Site      @relation(fields: [siteId], references: [id])
  siteId     String    @db.Uuid

  @@index([postId])
  @@index([userId])
  @@map("comment")
}

model Tag {
  id        String   @id @default(uuid()) @db.Uuid
  name      String   @default("") @db.VarChar(50)
  color     String   @default("") @db.VarChar(50)
  postCount Int      @default(0) @db.Integer
  hidden    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User     User?     @relation(fields: [userId], references: [id])
  userId   String?   @db.Uuid
  postTags PostTag[]
  Site     Site?     @relation(fields: [siteId], references: [id])
  siteId   String?   @db.Uuid

  @@index(name)
  @@index(hidden)
  @@map("tag")
}

model PostTag {
  id        String   @id @default(uuid()) @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  post      Post     @relation(fields: [postId], references: [id])
  postId    String   @db.Uuid
  tag       Tag      @relation(fields: [tagId], references: [id])
  tagId     String   @db.Uuid
  site      Site     @relation(fields: [siteId], references: [id])
  siteId    String   @db.Uuid

  @@index([postId])
  @@map("post_tag")
}

model AccessToken {
  id          String    @id @default(uuid()) @db.Uuid
  token       String    @unique @default("") @db.VarChar(255)
  title       String?   @db.VarChar(50)
  description String?
  expiredAt   DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastUsedAt  DateTime?
  user        User      @relation(fields: [userId], references: [id])
  userId      String    @db.Uuid
  siteId      String    @db.Uuid
  site        Site      @relation(fields: [siteId], references: [id])

  @@index([userId])
  @@map("access_token")
}

enum CollaboratorRole {
  READ
  WRITE
  ADMIN
  OWNER
}

model Collaborator {
  id        String           @id @default(uuid())
  role      CollaboratorRole @default(WRITE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  siteId    String           @db.Uuid
  site      Site             @relation(fields: [siteId], references: [id])
  userId    String           @db.Uuid
  user      User             @relation(fields: [userId], references: [id])

  @@unique([userId, siteId])
  @@index([siteId])
  @@index([userId])
  @@map("collaborator")
}

enum ChannelType {
  TEXT
}

model Channel {
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @default("") @db.VarChar(50)
  description String      @default("") @db.Text
  type        ChannelType @default(TEXT)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  site        Site        @relation(fields: [siteId], references: [id])
  siteId      String      @db.Uuid
  messages    Message[]

  @@index([siteId])
  @@map("channel")
}

model Message {
  id          String   @id @default(uuid()) @db.Uuid
  // Sended = 1 Others sent successfully;SendFail = 2;Sending = 3;Undo = 4;AtAll = 5@All people;
  // SelfSend = 6 Send successfully; PeerRead = 7 The other party has read;
  // Reject = 8 // Backstage rejection (such as sensitive words, etc.)
  status      Int
  direction   Int // send 0; receive 1;
  toId        String // Receive userId
  contentType Int // TEXT = 1, IMAGE = 2
  content     String   @default("") @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  site        Site     @relation(fields: [siteId], references: [id])
  siteId      String   @db.Uuid
  channel     Channel  @relation(fields: [channelId], references: [id])
  channelId   String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid

  @@index([channelId])
  @@index([userId])
  @@map("message")
}

model Cid {
  id        String @id @default(uuid()) @db.Uuid
  original  String @unique
  lowercase String @unique

  @@index([lowercase])
  @@map("cid")
}

enum SubdomainType {
  None
  Custom
  EnsName
  FarcasterName
  Address
  UserId
}

model Domain {
  id            String        @id @default(uuid()) @db.Uuid
  domain        String        @unique
  isSubdomain   Boolean       @default(true)
  subdomainType SubdomainType @default(None)
  disabled      Boolean       @default(false)
  site          Site          @relation(fields: [siteId], references: [id])
  siteId        String        @db.Uuid

  @@index([siteId])
  @@map("domain")
}

model RewardRequest {
  id              String           @id @default(uuid()) @db.Uuid
  userAddress     String
  type            ContributionType
  platform        Platform?
  content         String
  status          RequestStatus    @default(PENDING)
  tokenAmount     Float?           @default(0.0)
  transactionHash String?
  comments        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  @@index([userAddress])
  @@map("reward_request")
}

model Theme {
  id                String   @id @default(uuid()) @db.Uuid
  name              String   @unique @default("") @db.VarChar(100)
  displayName       String   @default("") @db.VarChar(255)
  manifest          String   @db.Text
  readme            String?  @db.Text
  logo              String?  @default("") @db.VarChar(2183)
  installationCount Int      @default(0)
  starCount         Int      @default(0)
  commentCount      Int      @default(0)
  user              User     @relation(fields: [userId], references: [id])
  userId            String   @db.Uuid
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([name])
  @@map("theme")
}

model HostedSite {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @default("") @db.VarChar(100)
  domain      String   @default("") @db.VarChar(2183)
  description String   @default("") @db.VarChar(500)
  logo        String   @default("") @db.VarChar(2183)
  version     String   @default("") @db.VarChar(100)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid

  @@index([userId])
  @@map("hosted_site")
}

model Asset {
  id            String       @id @default(uuid()) @db.Uuid
  url           String       @default("") @db.VarChar(2183)
  filename      String       @default("") @db.VarChar(2183)
  title         String       @default("") @db.VarChar(2183)
  description   String       @default("") @db.VarChar(500)
  contentType   String       @default("") @db.VarChar(100)
  isPublic      Boolean      @default(false)
  isTrashed     Boolean      @default(false)
  size          Int          @default(0) @db.Integer
  props         Json?
  sharingConfig Json?
  createdAt     DateTime
  updatedAt     DateTime     @updatedAt
  uploadedAt    DateTime     @updatedAt
  user          User         @relation(fields: [userId], references: [id])
  userId        String       @db.Uuid
  site          Site         @relation(fields: [siteId], references: [id])
  siteId        String       @db.Uuid
  assetLabels   AssetLabel[]
  assetAlbums   AssetAlbum[]

  @@index([userId])
  @@index([contentType])
  @@map("asset")
}

model Label {
  id         String @id @default(uuid()) @db.Uuid
  name       String @default("") @db.VarChar(50)
  color      String @default("") @db.VarChar(50)
  title      String @default("") @db.VarChar(2183)
  assetCount Int    @default(0) @db.Integer

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.Uuid
  site        Site         @relation(fields: [siteId], references: [id])
  siteId      String       @db.Uuid
  assetLabels AssetLabel[]

  @@index([userId])
  @@map("label")
}

model AssetLabel {
  id        String   @id @default(uuid()) @db.Uuid
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   String   @db.Uuid
  label     Label    @relation(fields: [labelId], references: [id])
  labelId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("asset_label")
}

model Album {
  id          String       @id @default(uuid()) @db.Uuid
  name        String       @default("") @db.VarChar(50)
  assetCount  Int          @default(0) @db.Integer
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  user        User         @relation(fields: [userId], references: [id])
  userId      String       @db.Uuid
  site        Site         @relation(fields: [siteId], references: [id])
  siteId      String       @db.Uuid
  assetAlbums AssetAlbum[]

  @@index([userId])
  @@map("Album")
}

model AssetAlbum {
  id        String   @id @default(uuid()) @db.Uuid
  asset     Asset    @relation(fields: [assetId], references: [id])
  assetId   String   @db.Uuid
  album     Album    @relation(fields: [albumId], references: [id])
  albumId   String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("asset_album")
}

model Page {
  id         String   @id @default(uuid()) @db.Uuid
  slug       String   @unique @default(uuid())
  parentId   String?  @db.Uuid
  parentType String?
  title      String   @default("") @db.VarChar(500)
  cover      String?  @db.VarChar(2183)
  icon       String   @default("") @db.VarChar(50)
  isTrashed  Boolean  @default(false)
  isJournal  Boolean  @default(false)
  children   Json?
  props      Json?
  date       String   @default("") @db.VarChar(20)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.Uuid
  site       Site     @relation(fields: [siteId], references: [id])
  siteId     String   @db.Uuid
  blocks     Block[]

  @@index([userId])
  @@index([siteId])
  @@map("page")
}

model Block {
  id          String   @id @default(uuid()) @db.Uuid
  parentId    String?  @db.Uuid
  type        String
  isTrashed   Boolean  @default(false)
  isCollapsed Boolean  @default(false)
  content     Json?
  children    Json?
  props       Json?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  page        Page     @relation(fields: [pageId], references: [id])
  pageId      String   @db.Uuid
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid
  site        Site     @relation(fields: [siteId], references: [id])
  siteId      String   @db.Uuid

  @@index([userId])
  @@index([pageId])
  @@index([siteId])
  @@map("block")
}

model Database {
  id           String   @id @default(uuid()) @db.Uuid
  name         String   @default("") @db.VarChar(50)
  color        String   @default("") @db.VarChar(50)
  parentId     String?  @db.Uuid
  parentType   String?
  icon         String   @default("") @db.VarChar(50)
  cover        String?  @db.VarChar(2183)
  content      Json?
  activeViewId String?  @unique @db.Uuid
  viewIds      Json?
  props        Json?
  children     Json?
  isTrashed    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.Uuid
  site         Site     @relation(fields: [siteId], references: [id])
  siteId       String   @db.Uuid
  fields       Field[]
  records      Record[]
  views        View[]

  @@index([userId])
  @@index([siteId])
  @@map("database")
}

model Field {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.Uuid
  displayName String   @default("")
  description String   @default("") @db.VarChar(500)
  fieldType   String
  config      Json?
  options     Json?
  isPrimary   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @db.Uuid
  database    Database @relation(fields: [databaseId], references: [id])
  databaseId  String   @db.Uuid
  site        Site     @relation(fields: [siteId], references: [id])
  siteId      String   @db.Uuid

  @@index([databaseId])
  @@index([userId])
  @@index([siteId])
  @@map("field")
}

model Record {
  id         String    @id @default(uuid()) @db.Uuid
  sort       Int       @default(0) @db.Integer
  fields     Json
  deletedAt  DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(fields: [userId], references: [id])
  userId     String    @db.Uuid
  database   Database  @relation(fields: [databaseId], references: [id])
  databaseId String    @db.Uuid
  site       Site      @relation(fields: [siteId], references: [id])
  siteId     String    @db.Uuid

  @@index([databaseId])
  @@index([userId])
  @@index([siteId])
  @@map("record")
}

model View {
  id              String   @id @default(uuid()) @db.Uuid
  name            String   @default("") @db.VarChar(50)
  description     String   @default("") @db.VarChar(500)
  viewType        String
  viewFields      Json
  sorts           Json?
  groups          Json
  filters         Json
  kanbanFieldId   String?  @db.Uuid // fieldId for kanban
  kanbanOptionIds Json
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  user            User     @relation(fields: [userId], references: [id])
  userId          String   @db.Uuid
  database        Database @relation(fields: [databaseId], references: [id])
  databaseId      String   @db.Uuid
  site            Site     @relation(fields: [siteId], references: [id])
  siteId          String   @db.Uuid

  @@index([databaseId])
  @@index([userId])
  @@index([siteId])
  @@map("view")
}

model Extension {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String
  name              String   @unique
  title             String   @db.Text
  manifest          String   @db.Text
  readme            String   @db.Text
  logo              String
  installationCount Int      @default(0)
  starCount         Int      @default(0)
  commentCount      Int      @default(0)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  @@index([userId])
  @@index([name])
  @@map("extension")
}
